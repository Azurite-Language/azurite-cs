(import basics)
(basics azur)

(translate ("print" "=" a b) ("any" "any" "any") (azur "" "({a} == {b})"))
(translate ("print" "+" a b) ("any" "any" "any") (azur "" "({a} + {b})"))
(translate ("print" "-" a b) ("any" "any" "any") (azur "" "({a} - {b})"))
(translate ("print" "*" a b) ("any" "any" "any") (azur "" "({a} * {b})"))
(translate ("print" "/" a b) ("any" "any" "any") (azur "" "({a} / {b})"))
(translate ("print" "and" a b) ("any" "any" "any") (azur "" "({a} && {b})"))
(translate ("print" "if" cond a b) ("any" "any" "any") (azur "" "({cond}? {a} : {b})"))
(translate ("print" "function" 'name' params... body) ("any" "any" "any") (azur "" "function {name} ({params (params ,)}) { return {body}; }"))
(translate ("print" "fcall" 'name' params...) ("any" "any" "any") (azur "" "{name}({params (params ,)})"))


(defun add (x y) (+ x y))
(defun double (x) (+ x x))


(// easy everything can be computed)
(+ 1 1)
(if (= 5 5) 3 1)
(if (= 5 4) 3 1)
(if (= 5 (+ 2 3)) 3 1)
(if (= (+ 2 2) (+ 2 3)) 3 1)
(add (1 1))
(add ((+ 1 1) 2))
(double ((add ((+ 1 1) 2))))
(add ((if (= (double (2)) 4) 2 3) 1))

(// not able to compute everything)
(+ 1 x)
(if (= x 5) 3 1)
(if (= 5 5) x 1)
(if (= 5 5) 2 x)
(if (= 4 5) x 1)
(if (= 4 5) 1 x)
(if (= 5 (+ 2 3)) 3 1)
(if (= (+ 2 x) (+ 2 3)) 3 1)
(add (1 x))
(add ((+ 1 1) x))
(add ((+ 1 x) 1))
(double ((add ((+ 1 1) x))))
(add ((if (= (double (2)) 4) 2 3) x))

